{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/carec/Desktop/playing/React/social-card/src/index.js\";\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport './App.css';\nimport { getData } from './services';\nconst myUsernames = ['username-accenture_us.json', 'username-cristiano.json', 'username-rihanna.json', 'username-twitterdev.json'];\n/*\nservices - components vs services\n            used for business logic aspects including fetching/getting data from outside sources to decouple\n            UI logic from APIs (so any API change does not affect your component structure)\n\n            myApp initialization - get twitter data function\n*/\n\nfunction MyApp() {\n  let arr = getData();\n  return /*#__PURE__*/React.createElement(Deck, {\n    props: arr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  });\n}\n\nfunction Deck({\n  props\n}) {\n  /*original was an implicit return*/\n  return props.map((prop\n  /*parentheses with multiple*/\n  ) => {\n    // return <SocialCard props={prop}>\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 16\n      }\n    }, \"hi\");\n  });\n  /* alternative - return the map array as JSX to react\n   let socialCards = props.map(prop => {\n      let obj = {\n       }\n      return <SocialCard props={prop}>\n  });\n   return socialCards;\n  */\n} //\n// /* prop types/typescript\n//  avoid verbose names with API data - if the data ever changes you would need to change the variable name, decouple from API so you can reuse components*/\n//\n// function SocialCard({ props }) {\n//     let spanStyle = {\n//         color: 'black',\n//         fontWeight: 'bold'\n//     }\n//     /*shouldn't have a mapping in the social card, should put mapping in the deck level and pass it as props to the social card*/\n//     return (\n//         <div className=\"card\">\n//             <img src={prop.info.profile_banner_url} className=\"banner\" />\n//             <img src={prop.info.profile_image_url} className=\"pro-pic\" />\n//             {prop.info.verified &&\n//                 <img className=\"verified\" src={'https://upload.wikimedia.org/wikipedia/commons/e/e4/Twitter_Verified_Badge.svg'} />\n//             }\n//             <button className=\"follow-button\">Follow</button>\n//             <h1 className=\"name\">{prop.info.name}</h1>\n//             <h2 className=\"screen-name\">@{prop.info.screen_name}</h2>\n//             <p className=\"description\">{prop.info.description}</p>\n//             <p className=\"info-description\">\n//                 <img className=\"icon\" src={require('./images/location-icon.svg')} />{prop.info.location} &nbsp;&nbsp;\n//                 <img className=\"icon\" src={require('./images/url-icon.png')} /><a href={prop.info.url}>{prop.info.url}</a>&nbsp;&nbsp;\n//                 <img className=\"icon\" src={require('./images/bday-icon.png')} />Born date &nbsp;&nbsp;\n//                 <img className=\"icon\" src={require('./images/calendar-icon.png')} />Joined {prop.date} &nbsp;&nbsp;\n//             </p>\n//             <p className=\"info-description\"><span style={ spanStyle }>{prop.following}</span> Following <span style={ spanStyle }>{prop.followers}</span> Followers</p>\n//         </div>\n//     );\n// }\n//\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(MyApp, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/mnt/c/Users/carec/Desktop/playing/React/social-card/src/index.js"],"names":["React","ReactDOM","getData","myUsernames","MyApp","arr","Deck","props","map","prop","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,WAAP;AACA,SAAQC,OAAR,QAAsB,YAAtB;AAGA,MAAMC,WAAW,GAAG,CAAC,4BAAD,EAA+B,yBAA/B,EACC,uBADD,EAC0B,0BAD1B,CAApB;AAGA;;;;;;;;AAQA,SAASC,KAAT,GAAiB;AACb,MAAIC,GAAG,GAAGH,OAAO,EAAjB;AACA,sBACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH;;AAGD,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAyB;AACrB;AACA,SAAOA,KAAK,CAACC,GAAN,CAAU,CAAAC;AAAK;AAAD,OAAkC;AACnD;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAHM,CAAP;AAKA;;;;;;;;AAWH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAR,QAAQ,CAACS,MAAT,eACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEIC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFJ","sourcesContent":["import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport './App.css';\nimport {getData} from './services';\n\n\nconst myUsernames = ['username-accenture_us.json', 'username-cristiano.json',\n                     'username-rihanna.json', 'username-twitterdev.json'];\n\n/*\nservices - components vs services\n            used for business logic aspects including fetching/getting data from outside sources to decouple\n            UI logic from APIs (so any API change does not affect your component structure)\n\n            myApp initialization - get twitter data function\n*/\n\nfunction MyApp() {\n    let arr = getData();\n    return (\n        <Deck props={arr} />\n    );\n}\n\n\nfunction Deck({ props }) {\n    /*original was an implicit return*/\n    return props.map(prop /*parentheses with multiple*/ => {\n        // return <SocialCard props={prop}>\n        return <div>hi</div>;\n    });\n\n    /* alternative - return the map array as JSX to react\n\n    let socialCards = props.map(prop => {\n        let obj = {\n\n        }\n        return <SocialCard props={prop}>\n    });\n\n    return socialCards;\n    */\n}\n\n//\n// /* prop types/typescript\n//  avoid verbose names with API data - if the data ever changes you would need to change the variable name, decouple from API so you can reuse components*/\n//\n// function SocialCard({ props }) {\n//     let spanStyle = {\n//         color: 'black',\n//         fontWeight: 'bold'\n//     }\n//     /*shouldn't have a mapping in the social card, should put mapping in the deck level and pass it as props to the social card*/\n//     return (\n//         <div className=\"card\">\n//             <img src={prop.info.profile_banner_url} className=\"banner\" />\n//             <img src={prop.info.profile_image_url} className=\"pro-pic\" />\n//             {prop.info.verified &&\n//                 <img className=\"verified\" src={'https://upload.wikimedia.org/wikipedia/commons/e/e4/Twitter_Verified_Badge.svg'} />\n//             }\n//             <button className=\"follow-button\">Follow</button>\n//             <h1 className=\"name\">{prop.info.name}</h1>\n//             <h2 className=\"screen-name\">@{prop.info.screen_name}</h2>\n//             <p className=\"description\">{prop.info.description}</p>\n//             <p className=\"info-description\">\n//                 <img className=\"icon\" src={require('./images/location-icon.svg')} />{prop.info.location} &nbsp;&nbsp;\n//                 <img className=\"icon\" src={require('./images/url-icon.png')} /><a href={prop.info.url}>{prop.info.url}</a>&nbsp;&nbsp;\n//                 <img className=\"icon\" src={require('./images/bday-icon.png')} />Born date &nbsp;&nbsp;\n//                 <img className=\"icon\" src={require('./images/calendar-icon.png')} />Joined {prop.date} &nbsp;&nbsp;\n//             </p>\n//             <p className=\"info-description\"><span style={ spanStyle }>{prop.following}</span> Following <span style={ spanStyle }>{prop.followers}</span> Followers</p>\n//         </div>\n//     );\n// }\n//\n\n\nReactDOM.render(\n    <MyApp />,\n    document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}